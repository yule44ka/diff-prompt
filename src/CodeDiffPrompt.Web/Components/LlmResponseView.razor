<div class="llm-response-container">
    @if (IsLoading)
    {
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Analyzing code changes with Claude...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error</h4>
            <p>@ErrorMessage</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(Response))
    {
        <div class="response-content">
            <h3>Analysis Result</h3>
            <div class="response-text">
                @((MarkupString)FormatResponse(Response))
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <p class="text-muted">Click "Analyze Changes" to see the LLM response here.</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Response { get; set; } = "";

    [Parameter]
    public bool IsLoading { get; set; } = false;

    [Parameter]
    public string ErrorMessage { get; set; } = "";

    private string FormatResponse(string response)
    {
        if (string.IsNullOrWhiteSpace(response))
            return "";

        // Basic markdown-like formatting
        var formatted = System.Web.HttpUtility.HtmlEncode(response);
        
        // Convert line breaks to <br>
        formatted = formatted.Replace("\n", "<br>");
        
        // Bold text between ** **
        formatted = System.Text.RegularExpressions.Regex.Replace(
            formatted, 
            @"\*\*(.+?)\*\*", 
            "<strong>$1</strong>");
        
        // Bullet points
        formatted = System.Text.RegularExpressions.Regex.Replace(
            formatted,
            @"^- (.+?)$",
            "<li>$1</li>",
            System.Text.RegularExpressions.RegexOptions.Multiline);

        return formatted;
    }
}


